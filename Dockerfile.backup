# Backup Dockerfile with alternative approach
# If the main Dockerfile fails, try this one

# Build stage with better error handling
FROM golang:1.21-alpine AS builder

# Set environment variables for better build stability
ENV GOPROXY=https://proxy.golang.org,direct
ENV GOSUMDB=sum.golang.org

WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies with timeout and retry
RUN apk update && apk add --no-cache git ca-certificates && \
    go mod download && \
    go mod verify

# Copy source code
COPY . .

# Build the application with additional flags
RUN CGO_ENABLED=0 GOOS=linux go build \
    -ldflags="-w -s -extldflags '-static'" \
    -a -installsuffix cgo \
    -o main .

# Runtime stage with alternative registry
FROM registry-1.docker.io/library/alpine:3.18

# Minimal runtime setup
RUN apk add --no-cache ca-certificates && \
    rm -rf /var/cache/apk/*

WORKDIR /app

# Copy the binary from builder stage
COPY --from=builder /app/main .

# Ensure proper permissions
RUN chmod +x main

# Create a non-root user for security
RUN adduser -D -s /bin/sh -u 1000 appuser && \
    chown appuser:appuser main

USER appuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/api/health || exit 1

# Command to run
CMD ["./main"]
